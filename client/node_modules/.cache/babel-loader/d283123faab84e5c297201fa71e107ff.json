{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { UserActionTypes } from './user.types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { signInFailure, signInSuccess } from './user.actions';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailInStart)]);\n}","map":{"version":3,"sources":["/Users/alexandra/Downloads/development/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","signInFailure","signInSuccess","getSnapshotFromUserAuth","userAuth","userRef","user","userSnapshot","get","id","data","error","signInWithGoogle","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA2BC,GAA3B,EAAiCC,IAAjC,QAA4C,oBAA5C;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAgE,+BAAhE;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AAE/C,MAAI;AACA,UAAMC,OAAO,GAAG,MAAMT,IAAI,CAACI,yBAAD,EAA4BM,IAA5B,CAA1B;AACA,UAAMC,YAAY,GAAG,MAAMF,OAAO,CAACG,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACQ,aAAa,CAAC;AAAEO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACH,GAJD,CAIE,OAAMC,KAAN,EAAa;AACX,UAAMjB,GAAG,CAACO,aAAa,CAACU,KAAD,CAAd,CAAT;AAEH;AAEJ;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAACN,MAAAA;AAAD,QAAS,MAAMR,IAAI,CAACe,eAAL,CAAqBd,cAArB,CAArB;AACA,UAAMM,OAAO,GAAG,MAAMT,IAAI,CAACI,yBAAD,EAA4BM,IAA5B,CAA1B;AACA,UAAMC,YAAY,GAAG,MAAMF,OAAO,CAACG,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACQ,aAAa,CAAC;AAAEO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACH,GALD,CAKE,OAAMC,KAAN,EAAa;AACX,UAAMjB,GAAG,CAACO,aAAa,CAACU,KAAD,CAAd,CAAT;AAEH;AACJ;AAED,OAAO,UAAUG,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAX,CAA1B,EAAyD;AAC5D,MAAI;AACA,UAAM;AAACX,MAAAA;AAAD,QAAS,MAAMR,IAAI,CAACoB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAArB;AACA,UAAMZ,OAAO,GAAG,MAAMT,IAAI,CAACI,yBAAD,EAA4BM,IAA5B,CAA1B;AACA,UAAMC,YAAY,GAAG,MAAMF,OAAO,CAACG,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACQ,aAAa,CAAC;AAAEO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AAEH,GAND,CAME,OAAMC,KAAN,EAAa;AACX,UAAMjB,GAAG,CAACO,aAAa,CAACU,KAAD,CAAd,CAAT;AAEH;AACJ;AAED,OAAO,UAAUQ,mBAAV,GAAgC;AACnC,QAAM1B,UAAU,CACZI,eAAe,CAACuB,oBADJ,EAEZR,gBAFY,CAAhB;AAIH;AAED,OAAO,UAAUS,cAAV,GAA2B;AAC9B,QAAM5B,UAAU,CACZI,eAAe,CAACyB,mBADJ,EAEZR,eAFY,CAAhB;AAIH;AAED,OAAO,UAAUS,SAAV,GAAuB;AAC1B,QAAM5B,GAAG,CAAC,CAACC,IAAI,CAACuB,mBAAD,CAAL,EAA4BvB,IAAI,CAACyB,cAAD,CAAhC,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, put , all , call} from 'redux-saga/effects';\nimport { UserActionTypes } from './user.types';\n\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils'\nimport { signInFailure, signInSuccess } from './user.actions';\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n\n    try {\n        const userRef = yield call(createUserProfileDocument, user);\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data()}))\n    } catch(error) {\n        yield put(signInFailure(error))\n\n    }\n\n}\n\nexport function* signInWithGoogle() {\n    try {\n        const {user} = yield auth.signInWithPopup(googleProvider);\n        const userRef = yield call(createUserProfileDocument, user);\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data()}))\n    } catch(error) {\n        yield put(signInFailure(error))\n\n    }\n}\n\nexport function* signInWithEmail({ payload: {email, password}}) {\n    try {\n        const {user} = yield auth.signInWithEmailAndPassword(email, password);\n        const userRef = yield call(createUserProfileDocument, user);\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data()}))\n\n    } catch(error) {\n        yield put(signInFailure(error))\n\n    }\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(\n        UserActionTypes.GOOGLE_SIGN_IN_START,\n        signInWithGoogle\n        );\n}\n\nexport function* onEmailInStart() {\n    yield takeLatest(\n        UserActionTypes.EMAIL_SIGN_IN_START,\n        signInWithEmail\n        );\n}\n\nexport function* userSagas () {\n    yield all([call(onGoogleSignInStart), call(onEmailInStart)])\n}\n"]},"metadata":{},"sourceType":"module"}